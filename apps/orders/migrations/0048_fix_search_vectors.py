# Generated by Django 3.2.13 on 2023-01-09 17:25

from django.db import migrations


DROP_EXPRESSION_SQL = """
alter table orders_product alter column search_vector drop expression;
"""

REV_DROP_EXPRESSION_SQL = """
ALTER TABLE orders_product DROP COLUMN  search_vector;
ALTER TABLE orders_product ADD COLUMN search_vector tsvector GENERATED ALWAYS AS ( 
                setweight(to_tsvector('english', coalesce(product_id, '')), 'A') ||
                setweight(to_tsvector('english', coalesce(name,'')), 'B')
                ) STORED;
"""


RECALCULATE_PARENTS_SQL = """
WITH parent_arrs as (SELECT op.parent_id, array_agg(op.name) as names, array_agg(product_id) as product_ids
                     FROM orders_product op
                     WHERE op.parent_id is not null
                     GROUP BY op.parent_id),
     parents as (SELECT op.id,
                        op.name || ' ' || array_to_string(pa.names, ' ')       as names,
                        replace(array_to_string(pa.product_ids, ' '), '-', '') as ids
                 FROM parent_arrs pa
                          JOIN orders_product op ON op.id = pa.parent_id),
     search_vecs as (SELECT pa.id,
                            setweight(to_tsvector('english', coalesce(pa.ids, '')), 'A') ||
                            setweight(to_tsvector('english', coalesce(pa.names, '')), 'B') as vector
                     FROM parents pa)
UPDATE orders_product op
SET search_vector = sv.vector
FROM search_vecs sv
WHERE sv.id = op.id;
"""

FUNCTION_SQL = """
CREATE OR REPLACE FUNCTION parent_recalculate_search_vector () RETURNS TRIGGER 
AS $$
DECLARE
 pid integer := 0;
BEGIN
IF (TG_OP = 'DELETE') THEN
   pid := old.parent_id;
ELSIF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN
   pid := new.parent_id; 
END IF;

WITH child_aggs as (
    SELECT string_agg(op.name, ' ') as name, string_agg(op.product_id, ' ') as product_id 
    FROM orders_product op
    WHERE op.parent_id = pid
)
UPDATE orders_product
SET search_vector = setweight(to_tsvector('english', coalesce(ca.product_id, '')), 'A') || 
                    setweight(to_tsvector('english', coalesce(ca.name, '')), 'B') 
FROM child_aggs ca
WHERE id = pid;
IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN
   RETURN NEW; 
END IF;
END;
$$
LANGUAGE plpgsql
"""

CALCULATE_SEARCH_VECTOR_SQL = """
CREATE OR REPLACE FUNCTION calculate_search_vector() RETURNS TRIGGER 
AS $$
BEGIN
    IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN
       new.search_vector = setweight(to_tsvector('english', coalesce(new.product_id, '')), 'A') || 
                           setweight(to_tsvector('english', coalesce(new.name, '')), 'B');
       RETURN NEW; 
    END IF;
END;
$$
LANGUAGE plpgsql
"""

REV_FUNCTION_SQL = """
DROP FUNCTION IF EXISTS parent_recalculate_search_vector;
DROP FUNCTION IF EXISTS calculate_search_vector;
"""


TRIGGER_SQL = """
CREATE TRIGGER before_update_search_fields
BEFORE UPDATE ON orders_product
FOR EACH ROW
WHEN ((old.name IS DISTINCT FROM new.name) OR (old.product_id IS DISTINCT FROM new.product_id))
EXECUTE FUNCTION  calculate_search_vector();

CREATE TRIGGER before_insert_search_fields
BEFORE INSERT ON orders_product
FOR EACH ROW
EXECUTE FUNCTION  calculate_search_vector();

CREATE TRIGGER after_update_search_fields
AFTER UPDATE ON orders_product
FOR EACH ROW
WHEN (((old.name IS DISTINCT FROM new.name) OR (old.product_id IS DISTINCT FROM new.product_id)) 
      AND new.parent_id IS NOT NULL) 
EXECUTE FUNCTION parent_recalculate_search_vector();

CREATE TRIGGER after_create_orders_product
AFTER INSERT ON orders_product
FOR EACH ROW
WHEN (new.parent_id IS NOT NULL)
EXECUTE FUNCTION parent_recalculate_search_vector();

CREATE TRIGGER after_delete_orders_product
AFTER DELETE ON orders_product
FOR EACH ROW
WHEN (old.parent_id IS NOT NULL)
EXECUTE FUNCTION parent_recalculate_search_vector();
"""

REV_TRIGGER_SQL = """
DROP TRIGGER after_update_search_fields ON orders_product;
DROP TRIGGER after_create_orders_product ON orders_product;
DROP TRIGGER after_delete_orders_product ON orders_product;
"""


class Migration(migrations.Migration):

    dependencies = [
        ("orders", "0047_product_search_vector"),
    ]

    operations = [
        migrations.RunSQL(
            [DROP_EXPRESSION_SQL, RECALCULATE_PARENTS_SQL, CALCULATE_SEARCH_VECTOR_SQL, FUNCTION_SQL, TRIGGER_SQL],
            [REV_TRIGGER_SQL, REV_FUNCTION_SQL, REV_DROP_EXPRESSION_SQL],
        )
    ]
