# Generated by Django 4.1.5 on 2023-02-02 18:07

from django.db import migrations, models

FILL_SQL = '''
WITH inventory_stats AS (
    SELECT product_id, COUNT(*) as count
    FROM orders_officeproduct
    WHERE is_inventory
    GROUP BY product_id
)
UPDATE orders_product op
SET inventory_refs = istats.count
FROM inventory_stats istats
WHERE istats.product_id = op.id
'''

TRIGGERS_SQL = """
CREATE OR REPLACE FUNCTION update_inventory_refs() RETURNS TRIGGER
AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
      UPDATE orders_product SET inventory_refs = inventory_refs + 1 WHERE id = new.product_id;
    ELSIF (TG_OP = 'UPDATE') THEN
      IF new.is_inventory THEN
        UPDATE orders_product SET inventory_refs = inventory_refs + 1 WHERE id = new.product_id;
      ELSE
        UPDATE orders_product SET inventory_refs = inventory_refs - 1 WHERE id = new.product_id;
      END IF;
    ELSIF (TG_OP = 'DELETE') THEN
      UPDATE orders_product SET inventory_refs = inventory_refs - 1 WHERE id = old.product_id;
    END IF;
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER after_update_is_inventory_office_product
AFTER UPDATE ON orders_officeproduct
FOR EACH ROW
WHEN (old.is_inventory IS DISTINCT FROM new.is_inventory)
EXECUTE FUNCTION update_inventory_refs();

CREATE TRIGGER after_insert_is_inventory_office_product
AFTER INSERT ON orders_officeproduct
FOR EACH ROW
WHEN (new.is_inventory IS TRUE)
EXECUTE FUNCTION update_inventory_refs();

CREATE TRIGGER after_delete_is_inventory_office_product
AFTER DELETE ON orders_officeproduct
FOR EACH ROW
WHEN (old.is_inventory IS TRUE)
EXECUTE FUNCTION update_inventory_refs();
"""


REV_TRIGGERS_SQL = """
DROP TRIGGER after_update_is_inventory_office_product ON orders_officeproduct;
DROP TRIGGER after_insert_is_inventory_office_product ON orders_officeproduct;
DROP TRIGGER after_delete_is_inventory_office_product ON orders_officeproduct;
DROP FUNCTION IF EXISTS update_inventory_refs();
"""

class Migration(migrations.Migration):

    dependencies = [
        ("orders", "0054_fix_triggers"),
    ]

    operations = [
        migrations.AddField(
            model_name="product",
            name="inventory_refs",
            field=models.IntegerField(default=0, help_text="How many times it is inventory in OfficeProduct"),
        ),
        migrations.RunSQL(FILL_SQL, migrations.RunSQL.noop),
        migrations.RunSQL(TRIGGERS_SQL, REV_TRIGGERS_SQL),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["vendor", "inventory_refs", "last_price_updated"], name="vendor_inventory_refs_lpu_idx"
            ),
        ),
    ]
